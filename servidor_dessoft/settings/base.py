"""
Django settings for servidor_dessoft project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys
import json
from pathlib import Path

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DEV_SERVER = True

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'r*gl!)m0t=x##wt##w#4t=fl6-^kk8(smd547w*oi#77=*$69a'

# LOGIN
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/login'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Application definition

INSTALLED_APPS = [
    'core',
    'tutorials',
    'relatorio',
    'teste_de_mesa',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'core.middleware.LogIPMiddleware',
]

ROOT_URLCONF = 'servidor_dessoft.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'servidor_dessoft.wsgi.application'

AWS_ACCESS_KEY = None
AWS_SECRET_KEY = None
try:
    with open(str(Path(BASE_DIR) / '.aws_credentials')) as f:
        aws_credentials = json.load(f)
    AWS_ACCESS_KEY = aws_credentials['AWS_ACCESS_KEY']
    AWS_SECRET_KEY = aws_credentials['AWS_SECRET_KEY']
except:
    print('Utilizando configuração padrão para aws lambda', file=sys.stderr)

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {}
try:
    with open(str(Path(BASE_DIR) / '.db_credentials')) as f:
        db_credentials = json.load(f)
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': db_credentials['db'],
        'USER': db_credentials['user'],
        'PASSWORD': db_credentials['password'],
        'HOST': 'localhost',
        'PORT': '5432',
    }
except Exception as e:
    print(
        'Using sqlite3. If you want to use PostgreSQL make sure that .db_credentials exists in this project\'s root folder and the keys are correct.',
        file=sys.stderr)
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
if 'test' in sys.argv:
    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

AUTH_USER_MODEL = 'core.Usuario'

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Registre novos tipos de exercício aqui
VIEWS_DE_EXERCICIOS = {
    'ExercicioDeProgramacao': 'core.views.exercicio_de_programacao',
    'Tutorial': 'tutorials.views.tutorial',
    'TesteDeMesa': 'teste_de_mesa.views.teste_de_mesa',
}

VIEWS_DE_EXERCICIOS = {k.lower(): v for k, v in VIEWS_DE_EXERCICIOS.items()}
